// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: analytics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnalyticsService_GetAggregatedCategoryScores_FullMethodName = "/analytics.AnalyticsService/GetAggregatedCategoryScores"
	AnalyticsService_GetScoresByTicket_FullMethodName           = "/analytics.AnalyticsService/GetScoresByTicket"
	AnalyticsService_GetOverallQualityScore_FullMethodName      = "/analytics.AnalyticsService/GetOverallQualityScore"
	AnalyticsService_GetPeriodOverPeriodChange_FullMethodName   = "/analytics.AnalyticsService/GetPeriodOverPeriodChange"
)

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsServiceClient interface {
	GetAggregatedCategoryScores(ctx context.Context, in *AggregatedCategoryScoresRequest, opts ...grpc.CallOption) (*DailyAggregatedScoresResponse, error)
	GetScoresByTicket(ctx context.Context, in *ScoresByTicketRequest, opts ...grpc.CallOption) (*ScoresByTicketResponse, error)
	GetOverallQualityScore(ctx context.Context, in *OverallQualityScoreRequest, opts ...grpc.CallOption) (*OverallQualityScoreResponse, error)
	GetPeriodOverPeriodChange(ctx context.Context, in *PeriodOverPeriodChangeRequest, opts ...grpc.CallOption) (*PeriodOverPeriodChangeResponse, error)
}

type analyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsServiceClient(cc grpc.ClientConnInterface) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

func (c *analyticsServiceClient) GetAggregatedCategoryScores(ctx context.Context, in *AggregatedCategoryScoresRequest, opts ...grpc.CallOption) (*DailyAggregatedScoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DailyAggregatedScoresResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetAggregatedCategoryScores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetScoresByTicket(ctx context.Context, in *ScoresByTicketRequest, opts ...grpc.CallOption) (*ScoresByTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScoresByTicketResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetScoresByTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetOverallQualityScore(ctx context.Context, in *OverallQualityScoreRequest, opts ...grpc.CallOption) (*OverallQualityScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OverallQualityScoreResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetOverallQualityScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetPeriodOverPeriodChange(ctx context.Context, in *PeriodOverPeriodChangeRequest, opts ...grpc.CallOption) (*PeriodOverPeriodChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PeriodOverPeriodChangeResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetPeriodOverPeriodChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
// All implementations must embed UnimplementedAnalyticsServiceServer
// for forward compatibility.
type AnalyticsServiceServer interface {
	GetAggregatedCategoryScores(context.Context, *AggregatedCategoryScoresRequest) (*DailyAggregatedScoresResponse, error)
	GetScoresByTicket(context.Context, *ScoresByTicketRequest) (*ScoresByTicketResponse, error)
	GetOverallQualityScore(context.Context, *OverallQualityScoreRequest) (*OverallQualityScoreResponse, error)
	GetPeriodOverPeriodChange(context.Context, *PeriodOverPeriodChangeRequest) (*PeriodOverPeriodChangeResponse, error)
	mustEmbedUnimplementedAnalyticsServiceServer()
}

// UnimplementedAnalyticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnalyticsServiceServer struct{}

func (UnimplementedAnalyticsServiceServer) GetAggregatedCategoryScores(context.Context, *AggregatedCategoryScoresRequest) (*DailyAggregatedScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregatedCategoryScores not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetScoresByTicket(context.Context, *ScoresByTicketRequest) (*ScoresByTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScoresByTicket not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetOverallQualityScore(context.Context, *OverallQualityScoreRequest) (*OverallQualityScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverallQualityScore not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetPeriodOverPeriodChange(context.Context, *PeriodOverPeriodChangeRequest) (*PeriodOverPeriodChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeriodOverPeriodChange not implemented")
}
func (UnimplementedAnalyticsServiceServer) mustEmbedUnimplementedAnalyticsServiceServer() {}
func (UnimplementedAnalyticsServiceServer) testEmbeddedByValue()                          {}

// UnsafeAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServiceServer will
// result in compilation errors.
type UnsafeAnalyticsServiceServer interface {
	mustEmbedUnimplementedAnalyticsServiceServer()
}

func RegisterAnalyticsServiceServer(s grpc.ServiceRegistrar, srv AnalyticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnalyticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnalyticsService_ServiceDesc, srv)
}

func _AnalyticsService_GetAggregatedCategoryScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatedCategoryScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetAggregatedCategoryScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetAggregatedCategoryScores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetAggregatedCategoryScores(ctx, req.(*AggregatedCategoryScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetScoresByTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoresByTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetScoresByTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetScoresByTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetScoresByTicket(ctx, req.(*ScoresByTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetOverallQualityScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverallQualityScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetOverallQualityScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetOverallQualityScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetOverallQualityScore(ctx, req.(*OverallQualityScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetPeriodOverPeriodChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodOverPeriodChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetPeriodOverPeriodChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetPeriodOverPeriodChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetPeriodOverPeriodChange(ctx, req.(*PeriodOverPeriodChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsService_ServiceDesc is the grpc.ServiceDesc for AnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "analytics.AnalyticsService",
	HandlerType: (*AnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAggregatedCategoryScores",
			Handler:    _AnalyticsService_GetAggregatedCategoryScores_Handler,
		},
		{
			MethodName: "GetScoresByTicket",
			Handler:    _AnalyticsService_GetScoresByTicket_Handler,
		},
		{
			MethodName: "GetOverallQualityScore",
			Handler:    _AnalyticsService_GetOverallQualityScore_Handler,
		},
		{
			MethodName: "GetPeriodOverPeriodChange",
			Handler:    _AnalyticsService_GetPeriodOverPeriodChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analytics.proto",
}
